var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

require("core-js/modules/es.string.match");

require("core-js/modules/es.string.split");

var _Object$defineProperty2 = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty2(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

function ownKeys(object, enumerableOnly) { var keys = (0, _keys.default)(object); if (_getOwnPropertySymbols.default) { var symbols = (0, _getOwnPropertySymbols.default)(object); if (enumerableOnly) symbols = (0, _filter.default)(symbols).call(symbols, function (sym) { return (0, _getOwnPropertyDescriptor.default)(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; (0, _forEach.default)(_context3 = ownKeys(source, true)).call(_context3, function (key) { (0, _defineProperty3.default)(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors.default) { (0, _defineProperties.default)(target, (0, _getOwnPropertyDescriptors.default)(source)); } else { var _context4; (0, _forEach.default)(_context4 = ownKeys(source)).call(_context4, function (key) { (0, _defineProperty2.default)(target, key, (0, _getOwnPropertyDescriptor.default)(source, key)); }); } } return target; }

var FindBug = function (global) {
  var utils = {
    getStackTrace: function getStackTrace() {
      var obj = {};
      Error.captureStackTrace(obj, this);
      var info = (obj.stack || '').split(/\s+/);
      var pathInfo = info[info.length - 1];
      var pathArray = pathInfo.match(/:(\d+):(\d+)$/) || {};
      var nameArray = (pathInfo.substr(0, pathArray.index || 0) || '').split('/');
      var name = nameArray[nameArray.length] || 'index.html';
      return {
        name: name,
        line: pathArray[1] || 1,
        column: pathArray[2] || 1
      };
    },
    initEvent: function initEvent(findBug) {
      window.addEventListener('hashchange', function (e) {
        var _context;

        var newURL = e.newURL,
            oldURL = e.oldURL;
        findBug.addStack('hash', (0, _concat.default)(_context = "".concat(oldURL, " to ")).call(_context, newURL));
      });
    }
  };

  var FindBug =
  /*#__PURE__*/
  function () {
    function FindBug() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      (0, _classCallCheck2.default)(this, FindBug);
      this.stack = [];
      this.user = {};
      this.extra = {};
      this.version = '';
      this.config = {
        stack: 15
      };
      var _options$version = options.version,
          version = _options$version === void 0 ? '' : _options$version,
          _options$extra = options.extra,
          extra = _options$extra === void 0 ? {} : _options$extra,
          _options$user = options.user,
          user = _options$user === void 0 ? {} : _options$user,
          upload = options.upload;
      if (version === '') console.error('version 必须！');
      this.version = version;
      this.extra = extra;
      this.user = user;
      if (upload) this.upload = upload;
      if (!global.__findBug) global.__findBug = this;
      utils.initEvent(this);
    }

    (0, _createClass2.default)(FindBug, [{
      key: "upload",
      value: function upload(options) {
        console.log(options);
      }
    }, {
      key: "uploadError",
      value: function uploadError(pathInfo, info, option) {
        var version = this.version,
            extra = this.extra,
            user = this.user,
            upload = this.upload,
            stack = this.stack;
        upload(_objectSpread({
          pathInfo: pathInfo,
          extra: extra,
          stack: stack,
          info: info,
          level: 'error',
          version: version
        }, option, {}, user));
      }
    }, {
      key: "captureException",
      value: function captureException(msg) {
        var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var pathInfo = utils.getStackTrace();
        this.uploadError(pathInfo, msg, option);
      }
    }, {
      key: "captureExceptionReact",
      value: function captureExceptionReact(error) {
        var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var errorInfo = error.stack.split(/\n/) || [];
        var info = errorInfo[0];
        var fileName = errorInfo[1];
        var fileArray = fileName.match(/\(.+\/([^/]+?)\??:(\d+):(\d+)\)/) || [];
        this.uploadError({
          name: fileArray[1] || 'index.html',
          line: fileArray[2] || 1,
          column: fileArray[3] || 1
        }, info, option);
      }
    }, {
      key: "addStack",
      value: function addStack() {
        var _context2;

        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'msg';
        var info = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        this.stack.unshift({
          type: type,
          info: info
        });
        (0, _slice.default)(_context2 = this.stack).call(_context2, 0, this.config.stack);
      }
    }, {
      key: "setExtra",
      value: function setExtra() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this.extra = options;
      } // 设置用户信息

    }, {
      key: "setUser",
      value: function setUser() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this.user = options;
      }
    }]);
    return FindBug;
  }();

  return FindBug;
}(window);

var _default = FindBug;
exports.default = _default;
